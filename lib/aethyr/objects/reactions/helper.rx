!action
say hi emote
!test
event[:player].is_a? Player and not event[:player].admin
!reaction
"sayto #{event[:player].name} Oh, my. This is not a very interesting place for players who are not administrators."

!action
hi
!test
true
!reaction
player = event[:player]
"sayto #{player.name} Hello, #{player.name}. Is there some way I could help you today?"

!action
say
!test
event[:phrase] and event[:phrase].downcase.include? "help" and event[:player] != self
!reaction
player = event[:player]
"sayto #{player.name} I can help you with many things, such as: ADMIN, README, CONFIG, SETTINGS, LICENSE, CREATE, AREA, ROOM, EXAMINE, INFO, LIST, STATUS, WHO, PLAYERS."

!action
say
!test
event[:phrase] and event[:phrase].downcase.include? "config" and event[:player] != self
!reaction
player = event[:player]
"sayto #{player.name} You can configure your server using the ACONFIG command."

!action
say
!test
event[:phrase] and event[:phrase].downcase.include? "create" and event[:player] != self
!reaction
player = event[:player]
"sayto #{player.name} You can create new things using the ACREATE command, though it is better to use a specific creation command like ACPROP, ACEXIT, ACROOM, ACPORTAL, or ACAREA. Try out some of these commands if you are feeling creative."

!action
say
!test
event[:phrase] and event[:phrase].downcase.include? "area" and event[:player] != self
!reaction
player = event[:player]
"sayto #{player.name} You can see where you are and what area you are in with LOOK HERE. See all areas with the AREAS command."

!action
say
!test
event[:phrase] and event[:phrase].downcase.include? "room" and event[:player] != self
!reaction
player = event[:player]
"sayto #{player.name} The room you are standing in can always be referring to as 'here'. For example, LOOK HERE or APUT ME IN HERE."

!action
say
!test
event[:phrase] and event[:phrase].downcase.include? "examine" and event[:player] != self
!reaction
player = event[:player]
"sayto #{player.name} There are several ways to examine items. The most informative method is to use ALOOK. ALOOK by itself will show you information about your current room. Or you can use it with a target, like ALOOK MAN. You can set attributes with the ASET command. Also ask me about INFO and REACTIONS."

!action
say
!test
event[:phrase] and event[:phrase].downcase.include? "info" and event[:player] != self
!reaction
player = event[:player]
"sayto #{player.name} Every game object has an Info object which can hold arbitrary information about an object. This is much easier and flexible than using attributes or instance variables. You can manipulate an object's information with the AINFO command."

!action
say
!test
event[:phrase] and event[:phrase].downcase.include? "list" and event[:player] != self
!reaction
player = event[:player]
"sayto #{player.name} ALIST is a very useful command. By itself, it will list all objects in the game. But you can also use it to search for specific items."

!action
say
!test
event[:phrase] and event[:phrase].downcase.include? "status" and event[:player] != self
!reaction
player = event[:player]
"sayto #{player.name} Check out how many objects are in the game with the ASTATUS command."

!action
say
!test
event[:phrase] and event[:phrase].downcase.include? "who" and event[:player] != self
!reaction
player = event[:player]
"sayto #{player.name} What are you, an owl? WHO will list all the players currently in the game and their locations."

!action
say
!test
event[:phrase] and event[:phrase].downcase.include? "players" and event[:player] != self
!reaction
player = event[:player]
"sayto #{player.name} If you build it, they will come."

!action
say
!test
event[:phrase] and event[:phrase].downcase.include? "reaction" and event[:player] != self
!reaction
player = event[:player]
"sayto #{player.name} Reactions are how I am communicating with you. They can be specified in text files (preferably) or code. To manipulate an object's reactions, use the AREACT command."

!action
say
!test
event[:phrase] and event[:phrase].downcase.include? "admin" and event[:player] != self
!reaction
player = event[:player]
"sayto #{player.name} you can view help files on the administrator commands using AHELP."

!action
say
!test
event[:phrase] and event[:phrase].downcase.include? "readme" and event[:player] != self
!reaction
player = event[:player]
player.output File.read("README")
""

!action
say
!test
event[:phrase] and event[:phrase].downcase.include? "license" and event[:player] != self
!reaction
player = event[:player]
r1 = CommandParser.parse(self, "say Wait. What game?")
r2 = CommandParser.parse(self, "emote looks about wildly, a look of raw horror passing over his face.")
r3 = CommandParser.parse(self, "emote calms down and returns to his usual helpful self.")
e1 = CommandParser.future_event(self, 2, r1)
e2 = CommandParser.future_event(self, 3, r2)
e3 = CommandParser.future_event(self, 6, r3)

add_event e1
add_event e2
add_event e3

"sayto #{player.name} This game is released under Apache License v2 except where noted in the source."

!action
say
!test
event[:phrase] and event[:phrase].downcase.include? "setting" and event[:player] != self
!reaction
player = event[:player]
"sayto #{player.name} You can set different things for yourself using SET. See HELP SET for more."
